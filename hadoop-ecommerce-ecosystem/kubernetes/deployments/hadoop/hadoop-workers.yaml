apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: hadoop-datanode
  namespace: hadoop-ecosystem
  labels:
    app: hadoop
    component: datanode
spec:
  serviceName: hadoop-datanode
  replicas: 2
  selector:
    matchLabels:
      app: hadoop
      component: datanode
  template:
    metadata:
      labels:
        app: hadoop
        component: datanode
    spec:
      containers:
      - name: datanode
        image: hadoop-base:3.3.4
        imagePullPolicy: Always
        command: ["/scripts/start-datanode.sh"]
        ports:
        - containerPort: 9864
          name: http-port
        - containerPort: 50020
          name: ipc-port
        env:
        - name: SERVICE_PRECONDITION
          value: "namenode:9870"
        - name: HADOOP_HOME
          value: "/opt/hadoop"
        - name: JAVA_HOME
          value: "/usr/local/openjdk-8"
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "4Gi"
            cpu: "2"
        volumeMounts:
        - name: datanode-storage
          mountPath: /hadoop/dfs/data
        - name: hadoop-config
          mountPath: /opt/hadoop/etc/hadoop
        - name: hadoop-scripts
          mountPath: /scripts
        readinessProbe:
          httpGet:
            path: /
            port: 9864
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: 9864
          initialDelaySeconds: 60
          periodSeconds: 30
      volumes:
      - name: hadoop-config
        configMap:
          name: hadoop-config
      - name: hadoop-scripts
        configMap:
          name: hadoop-scripts
          defaultMode: 0755
      nodeSelector:
        node-role: worker
  volumeClaimTemplates:
  - metadata:
      name: datanode-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: local-storage
      resources:
        requests:
          storage: 100Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: yarn-nodemanager
  namespace: hadoop-ecosystem
  labels:
    app: hadoop
    component: nodemanager
spec:
  serviceName: yarn-nodemanager
  replicas: 2
  selector:
    matchLabels:
      app: hadoop
      component: nodemanager
  template:
    metadata:
      labels:
        app: hadoop
        component: nodemanager
    spec:
      containers:
      - name: nodemanager
        image: hadoop-base:3.3.4
        imagePullPolicy: Always
        command: ["/scripts/start-nodemanager.sh"]
        ports:
        - containerPort: 8042
          name: webapp-port
        env:
        - name: SERVICE_PRECONDITION
          value: "namenode:9870 resourcemanager:8088"
        - name: HADOOP_HOME
          value: "/opt/hadoop"
        - name: JAVA_HOME
          value: "/usr/local/openjdk-8"
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "4Gi"
            cpu: "2"
        volumeMounts:
        - name: hadoop-config
          mountPath: /opt/hadoop/etc/hadoop
        - name: hadoop-scripts
          mountPath: /scripts
        - name: yarn-logs
          mountPath: /hadoop/logs/yarn
        readinessProbe:
          httpGet:
            path: /node
            port: 8042
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /node
            port: 8042
          initialDelaySeconds: 60
          periodSeconds: 30
      volumes:
      - name: hadoop-config
        configMap:
          name: hadoop-config
      - name: hadoop-scripts
        configMap:
          name: hadoop-scripts
          defaultMode: 0755
      - name: yarn-logs
        emptyDir: {}
      nodeSelector:
        node-role: worker