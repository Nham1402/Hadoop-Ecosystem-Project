version: '3.8'

services:
  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - hadoop-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - hadoop-network

  # PostgreSQL for Hive Metastore
  postgres:
    image: postgres:13
    hostname: postgres
    container_name: postgres
    environment:
      POSTGRES_DB: metastore
      POSTGRES_USER: hive
      POSTGRES_PASSWORD: hivepassword
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/hive/scripts/init-schema.sql:/docker-entrypoint-initdb.d/init-schema.sql
    networks:
      - hadoop-network

  # Hadoop Namenode
  namenode:
    build: ./docker/hadoop-base
    image: hadoop-base:3.3.4
    hostname: namenode
    container_name: namenode
    command: ["./start-namenode.sh"]
    ports:
      - "9870:9870"
      - "8020:8020"
    environment:
      - CLUSTER_NAME=hadoop-cluster
    env_file:
      - .env
    volumes:
      - namenode-data:/hadoop/dfs/name
      - ./docker/hadoop-base/config:/opt/hadoop/etc/hadoop
      - ./docker/hadoop-base/scripts:/scripts
    networks:
      - hadoop-network
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '3'

  # Hadoop Datanode 1
  datanode1:
    build: ./docker/hadoop-base
    image: hadoop-base:3.3.4
    hostname: datanode1
    container_name: datanode1
    command: ["./start-datanode.sh"]
    ports:
      - "9864:9864"
    environment:
      - SERVICE_PRECONDITION=namenode:9870
    env_file:
      - .env
    volumes:
      - datanode1-data:/hadoop/dfs/data
      - ./docker/hadoop-base/config:/opt/hadoop/etc/hadoop
      - ./docker/hadoop-base/scripts:/scripts
    networks:
      - hadoop-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'

  # Hadoop Datanode 2
  datanode2:
    build: ./docker/hadoop-base
    image: hadoop-base:3.3.4
    hostname: datanode2
    container_name: datanode2
    command: ["./start-datanode.sh"]
    ports:
      - "9865:9864"
    environment:
      - SERVICE_PRECONDITION=namenode:9870
    env_file:
      - .env
    volumes:
      - datanode2-data:/hadoop/dfs/data
      - ./docker/hadoop-base/config:/opt/hadoop/etc/hadoop
      - ./docker/hadoop-base/scripts:/scripts
    networks:
      - hadoop-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'

  # YARN ResourceManager
  resourcemanager:
    build: ./docker/hadoop-base
    image: hadoop-base:3.3.4
    hostname: resourcemanager
    container_name: resourcemanager
    command: ["./start-resourcemanager.sh"]
    ports:
      - "8088:8088"
    environment:
      - SERVICE_PRECONDITION=namenode:9870
    env_file:
      - .env
    volumes:
      - ./docker/hadoop-base/config:/opt/hadoop/etc/hadoop
      - ./docker/hadoop-base/scripts:/scripts
    networks:
      - hadoop-network

  # YARN NodeManager 1
  nodemanager1:
    build: ./docker/hadoop-base
    image: hadoop-base:3.3.4
    hostname: nodemanager1
    container_name: nodemanager1
    command: ["./start-nodemanager.sh"]
    ports:
      - "8042:8042"
    environment:
      - SERVICE_PRECONDITION=namenode:9870 resourcemanager:8088
    env_file:
      - .env
    volumes:
      - ./docker/hadoop-base/config:/opt/hadoop/etc/hadoop
      - ./docker/hadoop-base/scripts:/scripts
    networks:
      - hadoop-network

  # YARN NodeManager 2
  nodemanager2:
    build: ./docker/hadoop-base
    image: hadoop-base:3.3.4
    hostname: nodemanager2
    container_name: nodemanager2
    command: ["./start-nodemanager.sh"]
    ports:
      - "8043:8042"
    environment:
      - SERVICE_PRECONDITION=namenode:9870 resourcemanager:8088
    env_file:
      - .env
    volumes:
      - ./docker/hadoop-base/config:/opt/hadoop/etc/hadoop
      - ./docker/hadoop-base/scripts:/scripts
    networks:
      - hadoop-network

  # Spark Master
  spark-master:
    build: ./docker/spark
    image: spark:3.4.1
    hostname: spark-master
    container_name: spark-master
    command: ["./start-master.sh"]
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
    env_file:
      - .env
    volumes:
      - ./docker/spark/config:/opt/spark/conf
      - ./docker/spark/scripts:/scripts
      - ./spark/jobs:/opt/spark/jobs
    networks:
      - hadoop-network

  # Spark Worker 1
  spark-worker1:
    build: ./docker/spark
    image: spark:3.4.1
    hostname: spark-worker1
    container_name: spark-worker1
    command: ["./start-worker.sh", "spark://spark-master:7077"]
    ports:
      - "8081:8081"
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=3g
    env_file:
      - .env
    volumes:
      - ./docker/spark/config:/opt/spark/conf
      - ./docker/spark/scripts:/scripts
    networks:
      - hadoop-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'

  # Spark Worker 2
  spark-worker2:
    build: ./docker/spark
    image: spark:3.4.1
    hostname: spark-worker2
    container_name: spark-worker2
    command: ["./start-worker.sh", "spark://spark-master:7077"]
    ports:
      - "8082:8081"
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=3g
    env_file:
      - .env
    volumes:
      - ./docker/spark/config:/opt/spark/conf
      - ./docker/spark/scripts:/scripts
    networks:
      - hadoop-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'

  # Hive Metastore
  hive-metastore:
    build: ./docker/hive
    image: hive:3.1.3
    hostname: hive-metastore
    container_name: hive-metastore
    command: ["./start-metastore.sh"]
    ports:
      - "9083:9083"
    environment:
      - SERVICE_PRECONDITION=namenode:9870 postgres:5432
    env_file:
      - .env
    depends_on:
      - postgres
      - namenode
    volumes:
      - ./docker/hive/config:/opt/hive/conf
      - ./docker/hive/scripts:/scripts
    networks:
      - hadoop-network

  # HiveServer2
  hiveserver2:
    build: ./docker/hive
    image: hive:3.1.3
    hostname: hiveserver2
    container_name: hiveserver2
    command: ["./start-hiveserver2.sh"]
    ports:
      - "10000:10000"
      - "10002:10002"
    environment:
      - SERVICE_PRECONDITION=hive-metastore:9083
    env_file:
      - .env
    depends_on:
      - hive-metastore
    volumes:
      - ./docker/hive/config:/opt/hive/conf
      - ./docker/hive/scripts:/scripts
    networks:
      - hadoop-network

  # HBase Master
  hbase-master:
    build: ./docker/hbase
    image: hbase:2.5.5
    hostname: hbase-master
    container_name: hbase-master
    command: ["./start-master.sh"]
    ports:
      - "16010:16010"
      - "16000:16000"
    environment:
      - SERVICE_PRECONDITION=namenode:9870 zookeeper:2181
    env_file:
      - .env
    depends_on:
      - namenode
      - zookeeper
    volumes:
      - ./docker/hbase/config:/opt/hbase/conf
      - ./docker/hbase/scripts:/scripts
    networks:
      - hadoop-network

  # HBase RegionServer
  hbase-regionserver:
    build: ./docker/hbase
    image: hbase:2.5.5
    hostname: hbase-regionserver
    container_name: hbase-regionserver
    command: ["./start-regionserver.sh"]
    ports:
      - "16030:16030"
      - "16020:16020"
    environment:
      - SERVICE_PRECONDITION=hbase-master:16010
    env_file:
      - .env
    depends_on:
      - hbase-master
    volumes:
      - ./docker/hbase/config:/opt/hbase/conf
      - ./docker/hbase/scripts:/scripts
    networks:
      - hadoop-network

  # Airflow Webserver
  airflow-webserver:
    build: ./docker/airflow
    image: airflow:2.7.1
    hostname: airflow-webserver
    container_name: airflow-webserver
    command: ["webserver"]
    ports:
      - "8080:8080"
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    env_file:
      - .env
    depends_on:
      - postgres
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/config:/opt/airflow/config
      - ./docker/airflow/scripts:/scripts
    networks:
      - hadoop-network

  # Airflow Scheduler
  airflow-scheduler:
    build: ./docker/airflow
    image: airflow:2.7.1
    hostname: airflow-scheduler
    container_name: airflow-scheduler
    command: ["scheduler"]
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    env_file:
      - .env
    depends_on:
      - postgres
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/config:/opt/airflow/config
      - ./docker/airflow/scripts:/scripts
    networks:
      - hadoop-network

volumes:
  namenode-data:
  datanode1-data:
  datanode2-data:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  postgres-data:

networks:
  hadoop-network:
    driver: bridge