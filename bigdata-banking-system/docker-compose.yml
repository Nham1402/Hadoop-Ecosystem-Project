version: '3.8'

networks:
  bigdata-network:
    driver: overlay
    attachable: true

volumes:
  namenode-data:
  datanode-1-data:
  datanode-2-data:
  resourcemanager-data:
  nodemanager-1-data:
  nodemanager-2-data:
  zookeeper-1-data:
  zookeeper-2-data:
  zookeeper-3-data:
  kafka-1-data:
  kafka-2-data:
  kafka-3-data:
  hbase-master-data:
  hbase-region-1-data:
  hbase-region-2-data:
  mysql-data:
  airflow-logs:
  spark-master-data:
  spark-worker-1-data:
  spark-worker-2-data:

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    hostname: mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./configs/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - bigdata-network
    deploy:
      placement:
        constraints:
          - node.labels.role == master
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Zookeeper Cluster
  zookeeper-1:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper-1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper-1:2888:3888;zookeeper-2:2888:3888;zookeeper-3:2888:3888
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-1-data:/var/lib/zookeeper/data
    networks:
      - bigdata-network
    deploy:
      placement:
        constraints:
          - node.labels.role == master

  zookeeper-2:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper-2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_SERVERS: zookeeper-1:2888:3888;zookeeper-2:2888:3888;zookeeper-3:2888:3888
    ports:
      - "2182:2181"
    volumes:
      - zookeeper-2-data:/var/lib/zookeeper/data
    networks:
      - bigdata-network
    deploy:
      placement:
        constraints:
          - node.labels.role == worker1

  zookeeper-3:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper-3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_SERVERS: zookeeper-1:2888:3888;zookeeper-2:2888:3888;zookeeper-3:2888:3888
    ports:
      - "2183:2181"
    volumes:
      - zookeeper-3-data:/var/lib/zookeeper/data
    networks:
      - bigdata-network
    deploy:
      placement:
        constraints:
          - node.labels.role == worker2

  # Kafka Cluster
  kafka-1:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka-1
    depends_on:
      - zookeeper-1
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181,zookeeper-2:2181,zookeeper-3:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:29092,PLAINTEXT_HOST://${MASTER_IP}:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - "9092:9092"
    volumes:
      - kafka-1-data:/var/lib/kafka/data
    networks:
      - bigdata-network
    deploy:
      placement:
        constraints:
          - node.labels.role == master

  kafka-2:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka-2
    depends_on:
      - zookeeper-2
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181,zookeeper-2:2181,zookeeper-3:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:29093,PLAINTEXT_HOST://${WORKER1_IP}:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - "9093:9092"
    volumes:
      - kafka-2-data:/var/lib/kafka/data
    networks:
      - bigdata-network
    deploy:
      placement:
        constraints:
          - node.labels.role == worker1

  kafka-3:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka-3
    depends_on:
      - zookeeper-3
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181,zookeeper-2:2181,zookeeper-3:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:29094,PLAINTEXT_HOST://${WORKER2_IP}:9094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - "9094:9092"
    volumes:
      - kafka-3-data:/var/lib/kafka/data
    networks:
      - bigdata-network
    deploy:
      placement:
        constraints:
          - node.labels.role == worker2

  # Hadoop NameNode
  namenode:
    image: apache/hadoop:3.3.6
    hostname: namenode
    command: ["hdfs", "namenode"]
    environment:
      CLUSTER_NAME: banking-cluster
      HDFS_CONF_dfs_replication: 2
      HDFS_CONF_dfs_namenode_datanode_registration_ip-hostname-check: "false"
      HDFS_CONF_dfs_permissions_enabled: "false"
      HDFS_CONF_dfs_webhdfs_enabled: "true"
    ports:
      - "9870:9870"
      - "8020:8020"
    volumes:
      - namenode-data:/hadoop/dfs/name
      - ./configs/hadoop:/opt/hadoop/etc/hadoop
    networks:
      - bigdata-network
    deploy:
      placement:
        constraints:
          - node.labels.role == master
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Hadoop DataNodes
  datanode-1:
    image: apache/hadoop:3.3.6
    hostname: datanode-1
    command: ["hdfs", "datanode"]
    environment:
      HDFS_CONF_dfs_datanode_data_dir: /hadoop/dfs/data
      HDFS_CONF_dfs_datanode_use_datanode_hostname: "false"
      HDFS_CONF_dfs_client_use_datanode_hostname: "false"
    volumes:
      - datanode-1-data:/hadoop/dfs/data
      - ./configs/hadoop:/opt/hadoop/etc/hadoop
    networks:
      - bigdata-network
    deploy:
      placement:
        constraints:
          - node.labels.role == worker1

  datanode-2:
    image: apache/hadoop:3.3.6
    hostname: datanode-2
    command: ["hdfs", "datanode"]
    environment:
      HDFS_CONF_dfs_datanode_data_dir: /hadoop/dfs/data
      HDFS_CONF_dfs_datanode_use_datanode_hostname: "false"
      HDFS_CONF_dfs_client_use_datanode_hostname: "false"
    volumes:
      - datanode-2-data:/hadoop/dfs/data
      - ./configs/hadoop:/opt/hadoop/etc/hadoop
    networks:
      - bigdata-network
    deploy:
      placement:
        constraints:
          - node.labels.role == worker2

  # YARN ResourceManager
  resourcemanager:
    image: apache/hadoop:3.3.6
    hostname: resourcemanager
    command: ["yarn", "resourcemanager"]
    environment:
      YARN_CONF_yarn_resourcemanager_hostname: resourcemanager
      YARN_CONF_yarn_resourcemanager_bind_host: 0.0.0.0
      YARN_CONF_yarn_nodemanager_aux_services: mapreduce_shuffle
    ports:
      - "8088:8088"
      - "8032:8032"
    volumes:
      - resourcemanager-data:/hadoop/yarn/timeline
      - ./configs/hadoop:/opt/hadoop/etc/hadoop
    networks:
      - bigdata-network
    deploy:
      placement:
        constraints:
          - node.labels.role == master

  # YARN NodeManagers
  nodemanager-1:
    image: apache/hadoop:3.3.6
    hostname: nodemanager-1
    command: ["yarn", "nodemanager"]
    environment:
      YARN_CONF_yarn_resourcemanager_hostname: resourcemanager
      YARN_CONF_yarn_nodemanager_aux_services: mapreduce_shuffle
      YARN_CONF_yarn_nodemanager_bind_host: 0.0.0.0
      YARN_CONF_yarn_nodemanager_resource_memory-mb: 2048
      YARN_CONF_yarn_nodemanager_resource_cpu-vcores: 2
    volumes:
      - nodemanager-1-data:/hadoop/yarn/nodemanager
      - ./configs/hadoop:/opt/hadoop/etc/hadoop
    networks:
      - bigdata-network
    deploy:
      placement:
        constraints:
          - node.labels.role == worker1

  nodemanager-2:
    image: apache/hadoop:3.3.6
    hostname: nodemanager-2
    command: ["yarn", "nodemanager"]
    environment:
      YARN_CONF_yarn_resourcemanager_hostname: resourcemanager
      YARN_CONF_yarn_nodemanager_aux_services: mapreduce_shuffle
      YARN_CONF_yarn_nodemanager_bind_host: 0.0.0.0
      YARN_CONF_yarn_nodemanager_resource_memory-mb: 2048
      YARN_CONF_yarn_nodemanager_resource_cpu-vcores: 2
    volumes:
      - nodemanager-2-data:/hadoop/yarn/nodemanager
      - ./configs/hadoop:/opt/hadoop/etc/hadoop
    networks:
      - bigdata-network
    deploy:
      placement:
        constraints:
          - node.labels.role == worker2

  # Spark Master
  spark-master:
    image: bitnami/spark:3.5
    hostname: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_MASTER_HOST=0.0.0.0
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:
      - spark-master-data:/opt/bitnami/spark/work
      - ./spark-jobs:/opt/spark-jobs
      - ./configs/spark:/opt/bitnami/spark/conf
    networks:
      - bigdata-network
    deploy:
      placement:
        constraints:
          - node.labels.role == master

  # Spark Workers
  spark-worker-1:
    image: bitnami/spark:3.5
    hostname: spark-worker-1
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - spark-worker-1-data:/opt/bitnami/spark/work
      - ./spark-jobs:/opt/spark-jobs
      - ./configs/spark:/opt/bitnami/spark/conf
    networks:
      - bigdata-network
    deploy:
      placement:
        constraints:
          - node.labels.role == worker1

  spark-worker-2:
    image: bitnami/spark:3.5
    hostname: spark-worker-2
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - spark-worker-2-data:/opt/bitnami/spark/work
      - ./spark-jobs:/opt/spark-jobs
      - ./configs/spark:/opt/bitnami/spark/conf
    networks:
      - bigdata-network
    deploy:
      placement:
        constraints:
          - node.labels.role == worker2

  # HBase Master
  hbase-master:
    image: harisekhon/hbase:2.4
    hostname: hbase-master
    environment:
      HBASE_CONF_hbase_rootdir: hdfs://namenode:8020/hbase
      HBASE_CONF_hbase_cluster_distributed: "true"
      HBASE_CONF_hbase_zookeeper_quorum: zookeeper-1,zookeeper-2,zookeeper-3
      HBASE_CONF_hbase_master: hbase-master:16000
      HBASE_CONF_hbase_master_hostname: hbase-master
      HBASE_CONF_hbase_master_port: 16000
      HBASE_CONF_hbase_master_info_port: 16010
    ports:
      - "16010:16010"
      - "16000:16000"
    volumes:
      - hbase-master-data:/hbase-data
      - ./configs/hbase:/hbase/conf
    networks:
      - bigdata-network
    depends_on:
      - namenode
      - zookeeper-1
    deploy:
      placement:
        constraints:
          - node.labels.role == master

  # HBase RegionServers
  hbase-regionserver-1:
    image: harisekhon/hbase:2.4
    hostname: hbase-regionserver-1
    command: ["hbase", "regionserver", "start"]
    environment:
      HBASE_CONF_hbase_rootdir: hdfs://namenode:8020/hbase
      HBASE_CONF_hbase_cluster_distributed: "true"
      HBASE_CONF_hbase_zookeeper_quorum: zookeeper-1,zookeeper-2,zookeeper-3
      HBASE_CONF_hbase_master: hbase-master:16000
    volumes:
      - hbase-region-1-data:/hbase-data
      - ./configs/hbase:/hbase/conf
    networks:
      - bigdata-network
    depends_on:
      - hbase-master
    deploy:
      placement:
        constraints:
          - node.labels.role == worker1

  hbase-regionserver-2:
    image: harisekhon/hbase:2.4
    hostname: hbase-regionserver-2
    command: ["hbase", "regionserver", "start"]
    environment:
      HBASE_CONF_hbase_rootdir: hdfs://namenode:8020/hbase
      HBASE_CONF_hbase_cluster_distributed: "true"
      HBASE_CONF_hbase_zookeeper_quorum: zookeeper-1,zookeeper-2,zookeeper-3
      HBASE_CONF_hbase_master: hbase-master:16000
    volumes:
      - hbase-region-2-data:/hbase-data
      - ./configs/hbase:/hbase/conf
    networks:
      - bigdata-network
    depends_on:
      - hbase-master
    deploy:
      placement:
        constraints:
          - node.labels.role == worker2

  # Hive Metastore
  hive-metastore:
    image: apache/hive:3.1.3
    hostname: hive-metastore
    environment:
      SERVICE_NAME: metastore
      DB_DRIVER: mysql
      SERVICE_OPTS: "-Djavax.jdo.option.ConnectionDriverName=com.mysql.cj.jdbc.Driver -Djavax.jdo.option.ConnectionURL=jdbc:mysql://mysql:3306/${MYSQL_DATABASE} -Djavax.jdo.option.ConnectionUserName=${MYSQL_USER} -Djavax.jdo.option.ConnectionPassword=${MYSQL_PASSWORD}"
    ports:
      - "9083:9083"
    volumes:
      - ./configs/hive:/opt/hive/conf
    networks:
      - bigdata-network
    depends_on:
      - mysql
      - namenode
    deploy:
      placement:
        constraints:
          - node.labels.role == master

  # Hive Server2
  hive-server:
    image: apache/hive:3.1.3
    hostname: hive-server
    environment:
      SERVICE_NAME: hiveserver2
      SERVICE_OPTS: "-Dhive.metastore.uris=thrift://hive-metastore:9083"
      IS_RESUME: "true"
    ports:
      - "10000:10000"
      - "10002:10002"
    volumes:
      - ./configs/hive:/opt/hive/conf
    networks:
      - bigdata-network
    depends_on:
      - hive-metastore
    deploy:
      placement:
        constraints:
          - node.labels.role == master

  # Flume Agents
  flume-agent-1:
    image: probablyfine/flume:1.9.0
    hostname: flume-agent-1
    command: ["flume-ng", "agent", "--conf", "/opt/flume/conf", "--conf-file", "/opt/flume/conf/flume.conf", "--name", "agent1"]
    volumes:
      - ./configs/flume:/opt/flume/conf
      - ./data/banking-sample:/data/input
    networks:
      - bigdata-network
    depends_on:
      - kafka-1
    deploy:
      placement:
        constraints:
          - node.labels.role == worker1

  flume-agent-2:
    image: probablyfine/flume:1.9.0
    hostname: flume-agent-2
    command: ["flume-ng", "agent", "--conf", "/opt/flume/conf", "--conf-file", "/opt/flume/conf/flume.conf", "--name", "agent2"]
    volumes:
      - ./configs/flume:/opt/flume/conf
      - ./data/banking-sample:/data/input
    networks:
      - bigdata-network
    depends_on:
      - kafka-2
    deploy:
      placement:
        constraints:
          - node.labels.role == worker2

  # Airflow
  airflow-webserver:
    image: apache/airflow:2.7.2
    hostname: airflow-webserver
    restart: always
    depends_on:
      - mysql
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@mysql:3306/${MYSQL_DATABASE}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session"
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "true"
      _AIRFLOW_DB_UPGRADE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_USER}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_PASSWORD}
    ports:
      - "8081:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./configs/airflow:/opt/airflow/config
      - airflow-logs:/opt/airflow/logs
    command: webserver
    networks:
      - bigdata-network
    deploy:
      placement:
        constraints:
          - node.labels.role == master

  airflow-scheduler:
    image: apache/airflow:2.7.2
    hostname: airflow-scheduler
    restart: always
    depends_on:
      - mysql
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@mysql:3306/${MYSQL_DATABASE}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./configs/airflow:/opt/airflow/config
      - airflow-logs:/opt/airflow/logs
    command: scheduler
    networks:
      - bigdata-network
    deploy:
      placement:
        constraints:
          - node.labels.role == master

  airflow-worker-1:
    image: apache/airflow:2.7.2
    hostname: airflow-worker-1
    restart: always
    depends_on:
      - mysql
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@mysql:3306/${MYSQL_DATABASE}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./configs/airflow:/opt/airflow/config
      - airflow-logs:/opt/airflow/logs
    command: celery worker
    networks:
      - bigdata-network
    deploy:
      placement:
        constraints:
          - node.labels.role == worker1

  airflow-worker-2:
    image: apache/airflow:2.7.2
    hostname: airflow-worker-2
    restart: always
    depends_on:
      - mysql
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@mysql:3306/${MYSQL_DATABASE}
    volumes:
      - ./dags:/opt/airflow/dags
      - ./configs/airflow:/opt/airflow/config
      - airflow-logs:/opt/airflow/logs
    command: celery worker
    networks:
      - bigdata-network
    deploy:
      placement:
        constraints:
          - node.labels.role == worker2

  # Jupyter Notebook
  jupyter:
    image: jupyter/pyspark-notebook:latest
    hostname: jupyter
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      GRANT_SUDO: "yes"
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/data
      - ./spark-jobs:/home/jovyan/spark-jobs
    networks:
      - bigdata-network
    deploy:
      placement:
        constraints:
          - node.labels.role == master

  # Schema Registry
  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    hostname: schema-registry
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    ports:
      - "8085:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka-1:29092,kafka-2:29093,kafka-3:29094
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - bigdata-network
    deploy:
      placement:
        constraints:
          - node.labels.role == master

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    hostname: kafka-ui
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: banking-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-1:29092,kafka-2:29093,kafka-3:29094
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper-1:2181,zookeeper-2:2181,zookeeper-3:2181
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
    networks:
      - bigdata-network
    deploy:
      placement:
        constraints:
          - node.labels.role == master

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    hostname: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - bigdata-network
    deploy:
      placement:
        constraints:
          - node.labels.role == master

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    hostname: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - bigdata-network
    deploy:
      placement:
        constraints:
          - node.labels.role == master